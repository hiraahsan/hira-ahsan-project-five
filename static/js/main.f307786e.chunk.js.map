{"version":3,"sources":["firebase.js","Images.js","StoredImages.js","StorySection.js","Header.js","InputSearch.js","UnsplashCall.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Images","props","className","type","name","id","indexKey","value","previewImg","onChange","appendImages","handleChange","htmlFor","src","alt","href","linkToPage","StoredImages","storedImg","storedTextId","storedText","StorySection","Header","InputSearch","onSubmit","handleSubmitSearch","handleSearchImages","UnsplashCall","setState","imageToAppend","document","querySelector","handleSubmitImage","event","preventDefault","isButtonDisabled","handleChangeInput","userInput","target","inputToSearch","q","state","axios","get","apiUrl","then","result","data","hits","mappedArray","map","response","previewURL","handleSubmit","console","log","dbRefText","push","dbRefImages","imageArray","textArray","runApi","mappedDbref","database","ref","params","per_page","order_by","this","on","snapshot","images","val","newImages","key","individualImages","imageId","imageUrl","stories","newStories","individualStories","storyId","storyText","storedImages","image","i","text","imagesFinal","urls","thumb","pageURL","alt_description","disabled","Component","App","dbRef","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f307786e.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAyf12FdGTgypQ0Ae48KszC61cViIsSRAU\",\n    authDomain: \"project-five-tests.firebaseapp.com\",\n    databaseURL: \"https://project-five-tests.firebaseio.com\",\n    projectId: \"project-five-tests\",\n    storageBucket: \"project-five-tests.appspot.com\",\n    messagingSenderId: \"909191868794\",\n    appId: \"1:909191868794:web:1046029a4765b1b69566c3\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\n\nexport default firebase;","import React from 'react';\n\nconst Images = (props) => {\n    return(\n        <div className=\"miniContainers\">\n            <input type=\"radio\" name=\"radio\" id={props.indexKey} value={props.previewImg} onChange={() => props.appendImages(props.handleChange)}/>\n            <label htmlFor={props.indexKey}>\n                <img src={props.previewImg} alt={props.alt}/>\n            </label>\n            <a href={props.linkToPage}>Link to full size</a>\n        </div>\n    )\n}\n\nexport default Images;","import React from 'react';\n\nconst StoredImages = (props) => {\n    return(\n        <>\n                {/* <div className=\"imgContainer\"> */}\n                <li><img id={props.id} src={props.storedImg}></img>\n                <p id={props.storedTextId}>{props.storedText}</p>\n</li>\n            {/* </div> */}\n        </>\n    )\n}\n\nexport default StoredImages;","import React from 'react';\n\nconst StorySection = (props) => {\n    return(\n        <>\n        {/* // <div className=\"storytime\"> */}\n        {/* <div className=\"storyContainer\"> */}\n            {/* <p id={props.storedTextId}>{props.storedText}</p> */}\n            {/* </div> */}\n        {/* // </div> */}\n        </>\n    )\n}\n\nexport default StorySection;","import React from 'react';\n\nconst Header = (props) => {\n    return(\n        <div className=\"header-section\">\n            <div className=\"oneThirdSection\">\n                {/* <img src={props.previewImg} /> */}\n            </div>\n\n            <div className=\"theRest\">\n                <header>\n                    <h1>Writer's Block</h1>\n                </header>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nconst InputSearch = (props) => {\n    return(\n        <form onSubmit={props.handleSubmitSearch}>\n            <input onChange={props.handleSearchImages} type=\"text\"/>\n            <button type=\"submit\">Search for images</button>\n        </form>\n    )\n}\n\nexport default InputSearch;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport firebase from 'firebase/app';\nimport Images from './Images';\nimport StoredImages from './StoredImages';\nimport StorySection from './StorySection';\nimport Header from './Header';\nimport InputSearch from './InputSearch';\n\n// To-Do: filter the selections by their height/widths?? and image types\n\nclass UnsplashCall extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // apiKey: '14421506-770fc3d3a51ab16bab09705a9',\n            // apiUrl: 'https://pixabay.com/api/',\n            q: '',\n            data: [],\n            mappedArray: [],\n            imageArray: [],\n            textArray: [],\n            runApi: [],\n            imageToAppend: '',\n            userInput: '',\n            inputToSearch: '',\n            mappedDbref: '',\n            isButtonDisabled: false,\n            dbRefImages: firebase.database().ref('/images'),\n            dbRefText: firebase.database().ref('/text')\n        }\n    }\n\n    componentDidMount() {\n\n        axios({\n            \"async\": true,\n            \"crossDomain\": true,\n            \"url\": `https://api.unsplash.com/photos/?client_id=851ca0e417e4da7927bb7094b0bb790d78758e507f353acd3aaa66d2e6e48462`,\n            \"method\": \"GET\",\n            params: {\n                per_page: 20,\n                order_by: \"popular\"\n            }\n        }).then( (response) => {\n            console.log(response)\n            this.setState({\n                data: response.data\n            })\n        })\n\n        this.state.dbRefImages.on('value', (snapshot) => {\n            const images = snapshot.val();\n            const newImages = []\n\n            for (let key in images) {\n                const individualImages = {\n                    imageId: key,\n                    imageUrl: images[key]\n                }\n                newImages.push(individualImages);\n            }\n\n            this.setState({\n                imageArray: newImages\n            })\n        })\n\n        this.state.dbRefText.on('value', (snapshot) => {\n            const stories = snapshot.val();\n            const newStories = []\n\n            for (let key in stories) {\n                const individualStories = {\n                    storyId: key,\n                    storyText: stories[key]\n                }\n                newStories.push(individualStories);\n            }\n\n            this.setState({\n                textArray: newStories\n            })\n        })\n    }\n\n    handleChange = () => {\n        this.setState({\n            imageToAppend: document.querySelector('input[name=\"radio\"]:checked').value\n        }\n        )\n    }\n\n    handleSubmitImage = (event) => {\n        event.preventDefault();\n        this.setState({\n            isButtonDisabled: true\n        })\n    }\n\n    handleChangeInput = (event) => {\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n    handleSearchImages = (event) => {\n        this.setState({\n            inputToSearch: event.target.value\n        })\n    }\n\n    handleSubmitSearch = (event) => {\n        event.preventDefault();\n        this.setState({\n            q: this.state.inputToSearch\n        })\n\n        let callApi = () => {\n            axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.q}`)\n                .then((result) => {\n                    this.setState({\n                        data: result.data.hits\n                    })\n                    this.setState({\n                        mappedArray: this.state.data.map((response) => {\n                            return response.previewURL;\n                        })\n                    })\n                })\n        }\n        callApi();\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        // console.log('event', event.target);\n\n        // and if statement, if both radio button is selected and text area is filled, the data will be pushed then\n\n        if (this.state.userInput !== '') {\n\n            if (this.state.imageToAppend !== '') {\n                console.log('input has registed');\n                this.state.dbRefText.push(this.state.userInput);\n                this.state.dbRefImages.push(this.state.imageToAppend);\n\n                this.setState({\n                    isButtonDisabled: true\n                })\n            }\n        } else {\n            console.log('this did not work')\n            // enter in error message function\n        }\n\n    }\n\n    render() {\n        // const textToAppend = this.state.userInput;\n\n        const storedImages = this.state.imageArray.map((image, i) => (\n            <StoredImages\n                storedImg={image.imageUrl}\n                id={image.imageId}\n                key={i}\n            />\n        ))\n\n        // const storedPreview = this.state.imageArray.map((image, i) => (\n\n        //     <Header\n        //         previewImg={image.imageUrl}\n        //     />\n        // ))\n\n        const storedText = this.state.textArray.map((text, i) => (\n            <StorySection\n                storedText={text.storyText}\n                storedTextId={text.storyId}\n                key={i}\n            />\n        ))\n        // appending text\n\n        const imagesFinal = this.state.data.map((response, i) => (\n            <Images\n                previewImg={response.urls.thumb}\n                linkToPage={response.pageURL}\n                indexKey={i}\n                alt={response.alt_description}\n                appendImages={this.handleChange}\n            />\n        ))\n\n        // appending images\n\n        return (\n            <div className=\"App\">\n                {/* {storedPreview} */}\n                <Header />\n                {/* <Header {this.storedPreview} */}\n                {/* /> */}\n\n                <InputSearch handleSearchImages={this.handleSearchImages} handleSubmitSearch={this.handleSubmitSearch} />\n\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"imageSection\">\n                        <section>\n                            <div className=\"imageContainer\">\n                                {imagesFinal}\n                            </div>\n\n                        </section>\n\n                    </div>\n\n                    <textarea onChange={this.handleChangeInput} name=\"\" id=\"\"></textarea>\n                    <button disabled={this.isButtonDisabled} type=\"submit\">Submit text here</button>\n                </form>\n                <div className=\"splitSection clearfix\">\n                    {storedImages}\n                    {storedText}\n                </div>\n                <StorySection\n                // appendImg={this.state.imageToAppend}\n                // textToBeAppended={textToAppend}\n                />\n            </div>\n        )\n    }\n}\n\nexport default UnsplashCall;","import React, { Component } from 'react';\nimport firebase from './firebase';\n// import SecondApiCall from './SecondApiCall';\n// import ImageSection from './ImageSection';\n// import axios from 'axios';\nimport './App.scss';\n// import ImageSection from './ImageSection';\nimport UnsplashCall from './UnsplashCall';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      dbRef: firebase.database().ref()\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"App wrapper\">\n        <UnsplashCall />\n        {/* Insert instructions here\n        as pop up?\n        or <details> */}\n        {/* add favicon */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}